#bot:
#  token: 6666866418:AAF2c8nkzeEpBi94_exnUHhGZhj-cLRHWM8
#  name: FintrackAPIBot

spring:

  application:
    name: telegram-service

  kafka:
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap-servers: localhost:9092
    dead_letter_topic: notification-retry


  datasource:
    url: jdbc:postgresql://8.219.131.180:8765/fintrack
    username: root
    password: P@SSWORD666
#    url: jdbc:postgresql://localhost:5432/demo_telegram_bot
#    username: postgres
#    password: krya
    driver-class-name: org.postgresql.Driver
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://keycloak-fintrack.sythorng.site/auth/realms/USER_SERVICE
          jwk-set-uri: https://keycloak-fintrack.sythorng.site/auth/realms/USER_SERVICE/protocol/openid-connect/certs
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

keycloak:
  realm: USER_SERVICE
  resource: client-app
  #  auth-server-url: https://demo.docengine.tech/auth/ #docker container
  auth-server-url: https://keycloak-fintrack.sythorng.site/auth/ #docker container
  credentials:
    username: 'admin'
    password: 'admin'
    client-id: 'client-app' # admin account for creating users
    secret: 'fdakufDNpefxzc7oaGHugg4UcL6jmSAy'

  grant-type: password
  tokenUrl: https://keycloak-fintrack.sythorng.site/auth/realms/USER_SERVICE/protocol/openid-connect/token

server:
  port: 8082

kafka:
  group-id: notification-consumer

